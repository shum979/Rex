// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.shubham.rex.core.xml


/**
  * usage:
  * val obj = scalaxb.fromXML[com.shubham.rex.core.xml.Foo](node)
  * val document = scalaxb.toXML[com.shubham.rex.core.xml.Foo](obj, "foo", com.shubham.rex.core.xml.defaultScope)
  **/
object `package` extends XMLProtocol {}

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Comshubhamrexcorexml_DataFlowsFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.DataFlows] = new DefaultComshubhamrexcorexml_DataFlowsFormat {}
  implicit lazy val Comshubhamrexcorexml_TypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.Type] = new DefaultComshubhamrexcorexml_TypeFormat {}
  implicit lazy val Comshubhamrexcorexml_FlowTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.FlowType] = new DefaultComshubhamrexcorexml_FlowTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ExportFileTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ExportFileType] = new DefaultComshubhamrexcorexml_ExportFileTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_AggregationsTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.AggregationsType] = new DefaultComshubhamrexcorexml_AggregationsTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_GroupByTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.GroupByType] = new DefaultComshubhamrexcorexml_GroupByTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ColumnListTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ColumnListType] = new DefaultComshubhamrexcorexml_ColumnListTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_SqlTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.SqlType] = new DefaultComshubhamrexcorexml_SqlTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_RenamesTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.RenamesType] = new DefaultComshubhamrexcorexml_RenamesTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_AddColumnsTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.AddColumnsType] = new DefaultComshubhamrexcorexml_AddColumnsTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_DeleteColumnTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.DeleteColumnType] = new DefaultComshubhamrexcorexml_DeleteColumnTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_AggregatorFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.Aggregator] = new DefaultComshubhamrexcorexml_AggregatorFormat {}
  implicit lazy val Comshubhamrexcorexml_AggregationTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.AggregationType] = new DefaultComshubhamrexcorexml_AggregationTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_RenameTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.RenameType] = new DefaultComshubhamrexcorexml_RenameTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ValueFromFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ValueFrom] = new DefaultComshubhamrexcorexml_ValueFromFormat {}
  implicit lazy val Comshubhamrexcorexml_AddColumnTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.AddColumnType] = new DefaultComshubhamrexcorexml_AddColumnTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ColumnTransformationTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ColumnTransformationType] = new DefaultComshubhamrexcorexml_ColumnTransformationTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_DataFlowTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.DataFlowType] = new DefaultComshubhamrexcorexml_DataFlowTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_TransformationsTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.TransformationsType] = new DefaultComshubhamrexcorexml_TransformationsTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_HiveTableTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.HiveTableType] = new DefaultComshubhamrexcorexml_HiveTableTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_CategoryFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.Category] = new DefaultComshubhamrexcorexml_CategoryFormat {}
  implicit lazy val Comshubhamrexcorexml_ExpressionFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.Expression] = new DefaultComshubhamrexcorexml_ExpressionFormat {}
  implicit lazy val Comshubhamrexcorexml_TransformationTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.TransformationType] = new DefaultComshubhamrexcorexml_TransformationTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ModeTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ModeType] = new DefaultComshubhamrexcorexml_ModeTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_DataSourcesTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.DataSourcesType] = new DefaultComshubhamrexcorexml_DataSourcesTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_DataSourceTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.DataSourceType] = new DefaultComshubhamrexcorexml_DataSourceTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_DatabaseTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.DatabaseType] = new DefaultComshubhamrexcorexml_DatabaseTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_FormatFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.Format] = new DefaultComshubhamrexcorexml_FormatFormat {}
  implicit lazy val Comshubhamrexcorexml_FileTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.FileType] = new DefaultComshubhamrexcorexml_FileTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_WithColumnTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.WithColumnType] = new DefaultComshubhamrexcorexml_WithColumnTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_PropertiesTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.PropertiesType] = new DefaultComshubhamrexcorexml_PropertiesTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_PropertyFilePathTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.PropertyFilePathType] = new DefaultComshubhamrexcorexml_PropertyFilePathTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_PropertyTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.PropertyType] = new DefaultComshubhamrexcorexml_PropertyTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_IngestTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.IngestType] = new DefaultComshubhamrexcorexml_IngestTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_SourceTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.SourceType] = new DefaultComshubhamrexcorexml_SourceTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ReportingSqlFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ReportingSql] = new DefaultComshubhamrexcorexml_ReportingSqlFormat {}
  implicit lazy val Comshubhamrexcorexml_ReportingTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ReportingType] = new DefaultComshubhamrexcorexml_ReportingTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_SideFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.Side] = new DefaultComshubhamrexcorexml_SideFormat {}
  implicit lazy val Comshubhamrexcorexml_StrategyFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.Strategy] = new DefaultComshubhamrexcorexml_StrategyFormat {}
  implicit lazy val Comshubhamrexcorexml_DeDuplicationTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.DeDuplicationType] = new DefaultComshubhamrexcorexml_DeDuplicationTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_DateColumnFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.DateColumn] = new DefaultComshubhamrexcorexml_DateColumnFormat {}
  implicit lazy val Comshubhamrexcorexml_DateColumnsTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.DateColumnsType] = new DefaultComshubhamrexcorexml_DateColumnsTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ModeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.Mode] = new DefaultComshubhamrexcorexml_ModeFormat {}
  implicit lazy val Comshubhamrexcorexml_SelectColumnsWithModeTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.SelectColumnsWithModeType] = new DefaultComshubhamrexcorexml_SelectColumnsWithModeTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ReconcilerTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ReconcilerType] = new DefaultComshubhamrexcorexml_ReconcilerTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ReconciliationTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ReconciliationType] = new DefaultComshubhamrexcorexml_ReconciliationTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ExportTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ExportType] = new DefaultComshubhamrexcorexml_ExportTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_AdditionalFieldsTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.AdditionalFieldsType] = new DefaultComshubhamrexcorexml_AdditionalFieldsTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ColumnFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.Column] = new DefaultComshubhamrexcorexml_ColumnFormat {}
  implicit lazy val Comshubhamrexcorexml_ExpressionColumnTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ExpressionColumnType] = new DefaultComshubhamrexcorexml_ExpressionColumnTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_Column2Format: scalaxb.XMLFormat[com.shubham.rex.core.xml.Column2] = new DefaultComshubhamrexcorexml_Column2Format {}
  implicit lazy val Comshubhamrexcorexml_ExpressionRowTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ExpressionRowType] = new DefaultComshubhamrexcorexml_ExpressionRowTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ExpressionFilterTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ExpressionFilterType] = new DefaultComshubhamrexcorexml_ExpressionFilterTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_SchemaColumnTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.SchemaColumnType] = new DefaultComshubhamrexcorexml_SchemaColumnTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_EnforceModeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.EnforceMode] = new DefaultComshubhamrexcorexml_EnforceModeFormat {}
  implicit lazy val Comshubhamrexcorexml_SchemaTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.SchemaType] = new DefaultComshubhamrexcorexml_SchemaTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_JoinTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.JoinType] = new DefaultComshubhamrexcorexml_JoinTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_JoinKeyFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.JoinKey] = new DefaultComshubhamrexcorexml_JoinKeyFormat {}
  implicit lazy val Comshubhamrexcorexml_JoinTransformTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.JoinTransformType] = new DefaultComshubhamrexcorexml_JoinTransformTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ColumnDataTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ColumnDataType] = new DefaultComshubhamrexcorexml_ColumnDataTypeFormat {}
  implicit lazy val Comshubhamrexcorexml_ExportFormatFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.ExportFormat] = new DefaultComshubhamrexcorexml_ExportFormatFormat {}
  implicit lazy val Comshubhamrexcorexml_PartitionTypeFormat: scalaxb.XMLFormat[com.shubham.rex.core.xml.PartitionType] = new DefaultComshubhamrexcorexml_PartitionTypeFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = { elem =>
    import scalaxb.{DataRecord, Helper, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("DataFlows"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.shubham.rex.core.xml.DataFlows](elem)))

      case _ => None
    }
  }

  def buildComshubhamrexcorexml_TypeFormat = new DefaultComshubhamrexcorexml_TypeFormat {}

  def buildComshubhamrexcorexml_AggregatorFormat = new DefaultComshubhamrexcorexml_AggregatorFormat {}

  def buildComshubhamrexcorexml_ValueFromFormat = new DefaultComshubhamrexcorexml_ValueFromFormat {}

  def buildComshubhamrexcorexml_CategoryFormat = new DefaultComshubhamrexcorexml_CategoryFormat {}

  def buildComshubhamrexcorexml_ModeTypeFormat = new DefaultComshubhamrexcorexml_ModeTypeFormat {}

  def buildComshubhamrexcorexml_FormatFormat = new DefaultComshubhamrexcorexml_FormatFormat {}

  def buildComshubhamrexcorexml_SourceTypeFormat = new DefaultComshubhamrexcorexml_SourceTypeFormat {}

  def buildComshubhamrexcorexml_SideFormat = new DefaultComshubhamrexcorexml_SideFormat {}

  def buildComshubhamrexcorexml_ModeFormat = new DefaultComshubhamrexcorexml_ModeFormat {}

  def buildComshubhamrexcorexml_EnforceModeFormat = new DefaultComshubhamrexcorexml_EnforceModeFormat {}

  def buildComshubhamrexcorexml_JoinTypeFormat = new DefaultComshubhamrexcorexml_JoinTypeFormat {}

  def buildComshubhamrexcorexml_ColumnDataTypeFormat = new DefaultComshubhamrexcorexml_ColumnDataTypeFormat {}

  def buildComshubhamrexcorexml_ExportFormatFormat = new DefaultComshubhamrexcorexml_ExportFormatFormat {}

  trait DefaultComshubhamrexcorexml_DataFlowsFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.DataFlows] {
    val targetNamespace: Option[String] = None

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.DataFlows] =
      phrase(opt(scalaxb.ElemName(None, "DataSources")) ~
        opt(scalaxb.ElemName(None, "Properties")) ~
        safeRep(scalaxb.ElemName(None, "DataFlow")) ^^ { case p1 ~ p2 ~ p3 =>
        com.shubham.rex.core.xml.DataFlows(p1.headOption map {
          scalaxb.fromXML[com.shubham.rex.core.xml.DataSourcesType](_, scalaxb.ElemName(node) :: stack)
        },
          p2.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.PropertiesType](_, scalaxb.ElemName(node) :: stack)
          },
          p3 map {
            scalaxb.fromXML[com.shubham.rex.core.xml.DataFlowType](_, scalaxb.ElemName(node) :: stack)
          },
          scala.collection.immutable.ListMap(List(
            (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@name" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.DataFlows, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.DataFlows, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DataSources map {
        scalaxb.toXML[com.shubham.rex.core.xml.DataSourcesType](_, None, Some("DataSources"), __scope, false)
      } getOrElse {
        Nil
      },
        __obj.Properties map {
          scalaxb.toXML[com.shubham.rex.core.xml.PropertiesType](_, None, Some("Properties"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.DataFlow flatMap {
          scalaxb.toXML[com.shubham.rex.core.xml.DataFlowType](_, None, Some("DataFlow"), __scope, false)
        })

  }

  trait DefaultComshubhamrexcorexml_TypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.Type] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.Type] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.Type = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Transform")) => com.shubham.rex.core.xml.Transform
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SQL")) => com.shubham.rex.core.xml.SQL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Export")) => com.shubham.rex.core.xml.Export
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Ingest")) => com.shubham.rex.core.xml.Ingest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Reporting")) => com.shubham.rex.core.xml.Reporting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Reconcile")) => com.shubham.rex.core.xml.Reconcile

    }

    def writes(__obj: com.shubham.rex.core.xml.Type, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_FlowTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.FlowType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("FlowType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.FlowType] =
      phrase(opt(scalaxb.ElemName(None, "Ingest")) ~
        opt(scalaxb.ElemName(None, "Transformations")) ~
        opt(scalaxb.ElemName(None, "Sql")) ~
        opt(scalaxb.ElemName(None, "Export")) ~
        opt(scalaxb.ElemName(None, "Reporting")) ~
        opt(scalaxb.ElemName(None, "Reconciliation")) ^^ { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
        com.shubham.rex.core.xml.FlowType(p1.headOption map {
          scalaxb.fromXML[com.shubham.rex.core.xml.IngestType](_, scalaxb.ElemName(node) :: stack)
        },
          p2.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.TransformationsType](_, scalaxb.ElemName(node) :: stack)
          },
          p3.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.SqlType](_, scalaxb.ElemName(node) :: stack)
          },
          p4.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.ExportType](_, scalaxb.ElemName(node) :: stack)
          },
          p5.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.ReportingType](_, scalaxb.ElemName(node) :: stack)
          },
          p6.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.ReconciliationType](_, scalaxb.ElemName(node) :: stack)
          },
          scala.collection.immutable.ListMap(List(
            (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@id" -> _
            },
            (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.Type](x, scalaxb.ElemName(node) :: stack)) } map {
              "@type" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.FlowType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.FlowType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Ingest map {
        scalaxb.toXML[com.shubham.rex.core.xml.IngestType](_, None, Some("Ingest"), __scope, false)
      } getOrElse {
        Nil
      },
        __obj.Transformations map {
          scalaxb.toXML[com.shubham.rex.core.xml.TransformationsType](_, None, Some("Transformations"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Sql map {
          scalaxb.toXML[com.shubham.rex.core.xml.SqlType](_, None, Some("Sql"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Export map {
          scalaxb.toXML[com.shubham.rex.core.xml.ExportType](_, None, Some("Export"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Reporting map {
          scalaxb.toXML[com.shubham.rex.core.xml.ReportingType](_, None, Some("Reporting"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Reconciliation map {
          scalaxb.toXML[com.shubham.rex.core.xml.ReconciliationType](_, None, Some("Reconciliation"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultComshubhamrexcorexml_ExportFileTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.ExportFileType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("ExportFileType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.ExportFileType] =
      phrase((scalaxb.ElemName(None, "TargetStore")) ~
        (scalaxb.ElemName(None, "FileLocation")) ~
        opt(scalaxb.ElemName(None, "Partition")) ~
        opt(scalaxb.ElemName(None, "Mode")) ~
        opt(scalaxb.ElemName(None, "Delimiter")) ~
        opt(scalaxb.ElemName(None, "IncludeHeader")) ^^ { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
        com.shubham.rex.core.xml.ExportFileType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
          scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
          p3.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.PartitionType](_, scalaxb.ElemName(node) :: stack)
          },
          p4.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
          p5.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
          p6.headOption map {
            scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack)
          },
          scala.collection.immutable.ListMap(List(
            (node \ "@format").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.ExportFormat](x, scalaxb.ElemName(node) :: stack)) } map {
              "@format" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.ExportFileType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@format", _) => attr = scala.xml.Attribute(null, "format", __obj.format.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.ExportFileType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.TargetStore, None, Some("TargetStore"), __scope, false),
        scalaxb.toXML[String](__obj.FileLocation, None, Some("FileLocation"), __scope, false),
        __obj.Partition map {
          scalaxb.toXML[com.shubham.rex.core.xml.PartitionType](_, None, Some("Partition"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Mode map {
          scalaxb.toXML[String](_, None, Some("Mode"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Delimiter map {
          scalaxb.toXML[String](_, None, Some("Delimiter"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.IncludeHeader map {
          scalaxb.toXML[Boolean](_, None, Some("IncludeHeader"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultComshubhamrexcorexml_AggregationsTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.AggregationsType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("AggregationsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.AggregationsType] =
      phrase(safeRep(scalaxb.ElemName(None, "Aggregation")) ^^ { case p1 =>
        com.shubham.rex.core.xml.AggregationsType(p1 map {
          scalaxb.fromXML[com.shubham.rex.core.xml.AggregationType](_, scalaxb.ElemName(node) :: stack)
        })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.AggregationsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Aggregation flatMap {
        scalaxb.toXML[com.shubham.rex.core.xml.AggregationType](_, None, Some("Aggregation"), __scope, false)
      })
  }

  trait DefaultComshubhamrexcorexml_GroupByTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.GroupByType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("GroupByType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.GroupByType] =
      phrase(safeRep(scalaxb.ElemName(None, "GroupByColumn")) ~
        safeRep(scalaxb.ElemName(None, "AggregateColumn")) ^^ { case p1 ~ p2 =>
        com.shubham.rex.core.xml.GroupByType(p1 map {
          scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
        },
          p2 map {
            scalaxb.fromXML[com.shubham.rex.core.xml.AggregationType](_, scalaxb.ElemName(node) :: stack)
          })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.GroupByType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.GroupByColumn flatMap {
        scalaxb.toXML[String](_, None, Some("GroupByColumn"), __scope, false)
      },
        __obj.AggregateColumn flatMap {
          scalaxb.toXML[com.shubham.rex.core.xml.AggregationType](_, None, Some("AggregateColumn"), __scope, false)
        })

  }

  trait DefaultComshubhamrexcorexml_ColumnListTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.ColumnListType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("ColumnListType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.ColumnListType] =
      phrase(safeRep(scalaxb.ElemName(None, "Column")) ^^ { case p1 =>
        com.shubham.rex.core.xml.ColumnListType(p1 map {
          scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
        })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.ColumnListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Column flatMap {
        scalaxb.toXML[String](_, None, Some("Column"), __scope, false)
      })
  }

  trait DefaultComshubhamrexcorexml_SqlTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.SqlType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("SqlType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.SqlType] =
      phrase((scalaxb.ElemName(None, "Query")) ^^ { case p1 =>
        com.shubham.rex.core.xml.SqlType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
          scala.collection.immutable.ListMap(List(
            (node \ "@registerAsTempTable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map {
              "@registerAsTempTable" -> _
            },
            (node \ "@applyondataref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@applyondataref" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.SqlType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@registerAsTempTable", _) => __obj.registerAsTempTable foreach { x => attr = scala.xml.Attribute(null, "registerAsTempTable", x.toString, attr) }
        case ("@applyondataref", _) => attr = scala.xml.Attribute(null, "applyondataref", __obj.applyondataref.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.SqlType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.Query, None, Some("Query"), __scope, false))
  }

  trait DefaultComshubhamrexcorexml_RenamesTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.RenamesType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("RenamesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.RenamesType] =
      phrase(safeRep(scalaxb.ElemName(None, "Column")) ^^ { case p1 =>
        com.shubham.rex.core.xml.RenamesType(p1 map {
          scalaxb.fromXML[com.shubham.rex.core.xml.RenameType](_, scalaxb.ElemName(node) :: stack)
        })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.RenamesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Column flatMap {
        scalaxb.toXML[com.shubham.rex.core.xml.RenameType](_, None, Some("Column"), __scope, false)
      })
  }

  trait DefaultComshubhamrexcorexml_AddColumnsTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.AddColumnsType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("AddColumnsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.AddColumnsType] =
      phrase(safeRep(scalaxb.ElemName(None, "Column")) ^^ { case p1 =>
        com.shubham.rex.core.xml.AddColumnsType(p1 map {
          scalaxb.fromXML[com.shubham.rex.core.xml.AddColumnType](_, scalaxb.ElemName(node) :: stack)
        })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.AddColumnsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Column flatMap {
        scalaxb.toXML[com.shubham.rex.core.xml.AddColumnType](_, None, Some("Column"), __scope, false)
      })
  }

  trait DefaultComshubhamrexcorexml_DeleteColumnTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.DeleteColumnType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("DeleteColumnType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.DeleteColumnType] =
      phrase(safeRep(scalaxb.ElemName(None, "Column")) ^^ { case p1 =>
        com.shubham.rex.core.xml.DeleteColumnType(p1 map {
          scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
        })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.DeleteColumnType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Column flatMap {
        scalaxb.toXML[String](_, None, Some("Column"), __scope, false)
      })
  }

  trait DefaultComshubhamrexcorexml_AggregatorFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.Aggregator] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.Aggregator] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.Aggregator = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SUM")) => com.shubham.rex.core.xml.SUM
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MAX")) => com.shubham.rex.core.xml.MAX
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("MIN")) => com.shubham.rex.core.xml.MIN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("COUNT")) => com.shubham.rex.core.xml.COUNT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AVG")) => com.shubham.rex.core.xml.AVG

    }

    def writes(__obj: com.shubham.rex.core.xml.Aggregator, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_AggregationTypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.AggregationType] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.AggregationType] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.AggregationType] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.AggregationType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
          (node \ "@aggregator").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.Aggregator](x, scalaxb.ElemName(node) :: stack)) } map {
            "@aggregator" -> _
          },
          (node \ "@alias").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
            "@alias" -> _
          },
          (node \ "@decimalPlaces").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map {
            "@decimalPlaces" -> _
          }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.AggregationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@aggregator", _) => attr = scala.xml.Attribute(null, "aggregator", __obj.aggregator.toString, attr)
        case ("@alias", _) => attr = scala.xml.Attribute(null, "alias", __obj.alias.toString, attr)
        case ("@decimalPlaces", _) => __obj.decimalPlaces foreach { x => attr = scala.xml.Attribute(null, "decimalPlaces", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.AggregationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultComshubhamrexcorexml_RenameTypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.RenameType] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.RenameType] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.RenameType] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.RenameType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
          (node \ "@existingName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
            "@existingName" -> _
          },
          (node \ "@newName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
            "@newName" -> _
          }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.RenameType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@existingName", _) => attr = scala.xml.Attribute(null, "existingName", __obj.existingName.toString, attr)
        case ("@newName", _) => attr = scala.xml.Attribute(null, "newName", __obj.newName.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.RenameType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultComshubhamrexcorexml_ValueFromFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.ValueFrom] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.ValueFrom] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.ValueFrom = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("literal")) => com.shubham.rex.core.xml.Literal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fromProperties")) => com.shubham.rex.core.xml.FromProperties
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fromStandardEnvVariable")) => com.shubham.rex.core.xml.FromStandardEnvVariable

    }

    def writes(__obj: com.shubham.rex.core.xml.ValueFrom, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_AddColumnTypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.AddColumnType] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.AddColumnType] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.AddColumnType] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.AddColumnType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
          (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
            "@name" -> _
          },
          (node \ "@dataType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.ColumnDataType](x, scalaxb.ElemName(node) :: stack)) } map {
            "@dataType" -> _
          },
          (node \ "@valueFrom").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.ValueFrom](x, scalaxb.ElemName(node) :: stack)) } map {
            "@valueFrom" -> _
          }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.AddColumnType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@dataType", _) => __obj.dataType foreach { x => attr = scala.xml.Attribute(null, "dataType", x.toString, attr) }
        case ("@valueFrom", _) => attr = scala.xml.Attribute(null, "valueFrom", __obj.valueFrom.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.AddColumnType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultComshubhamrexcorexml_ColumnTransformationTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.ColumnTransformationType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("ColumnTransformationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.ColumnTransformationType] =
      phrase(opt(scalaxb.ElemName(None, "AddNew")) ~
        opt(scalaxb.ElemName(None, "Delete")) ~
        opt(scalaxb.ElemName(None, "Rename")) ^^ { case p1 ~ p2 ~ p3 =>
        com.shubham.rex.core.xml.ColumnTransformationType(p1.headOption map {
          scalaxb.fromXML[com.shubham.rex.core.xml.AddColumnsType](_, scalaxb.ElemName(node) :: stack)
        },
          p2.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.DeleteColumnType](_, scalaxb.ElemName(node) :: stack)
          },
          p3.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.RenamesType](_, scalaxb.ElemName(node) :: stack)
          })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.ColumnTransformationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AddNew map {
        scalaxb.toXML[com.shubham.rex.core.xml.AddColumnsType](_, None, Some("AddNew"), __scope, false)
      } getOrElse {
        Nil
      },
        __obj.Delete map {
          scalaxb.toXML[com.shubham.rex.core.xml.DeleteColumnType](_, None, Some("Delete"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Rename map {
          scalaxb.toXML[com.shubham.rex.core.xml.RenamesType](_, None, Some("Rename"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultComshubhamrexcorexml_DataFlowTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.DataFlowType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("DataFlowType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.DataFlowType] =
      phrase(safeRep(scalaxb.ElemName(None, "Flow")) ^^ { case p1 =>
        com.shubham.rex.core.xml.DataFlowType(p1 map {
          scalaxb.fromXML[com.shubham.rex.core.xml.FlowType](_, scalaxb.ElemName(node) :: stack)
        })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.DataFlowType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Flow flatMap {
        scalaxb.toXML[com.shubham.rex.core.xml.FlowType](_, None, Some("Flow"), __scope, false)
      })
  }

  trait DefaultComshubhamrexcorexml_TransformationsTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.TransformationsType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("TransformationsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.TransformationsType] =
      phrase(safeRep(scalaxb.ElemName(None, "Transformation")) ^^ { case p1 =>
        com.shubham.rex.core.xml.TransformationsType(p1 map {
          scalaxb.fromXML[com.shubham.rex.core.xml.TransformationType](_, scalaxb.ElemName(node) :: stack)
        })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.TransformationsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Transformation flatMap {
        scalaxb.toXML[com.shubham.rex.core.xml.TransformationType](_, None, Some("Transformation"), __scope, false)
      })
  }

  trait DefaultComshubhamrexcorexml_HiveTableTypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.HiveTableType] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.HiveTableType] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.HiveTableType] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.HiveTableType(scala.collection.immutable.ListMap(List(
        (node \ "@tableName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@tableName" -> _
        }
      ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.HiveTableType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@tableName", _) => __obj.tableName foreach { x => attr = scala.xml.Attribute(null, "tableName", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.HiveTableType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }

  trait DefaultComshubhamrexcorexml_CategoryFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.Category] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.Category] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.Category = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SchemaTransformation")) => com.shubham.rex.core.xml.SchemaTransformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ColumnTransformation")) => com.shubham.rex.core.xml.ColumnTransformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GroupByTransformation")) => com.shubham.rex.core.xml.GroupByTransformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SimpleFilterTransformation")) => com.shubham.rex.core.xml.SimpleFilterTransformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CustomFilterTransformation")) => com.shubham.rex.core.xml.CustomFilterTransformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CustomTransformation")) => com.shubham.rex.core.xml.CustomTransformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("JoinTransformation")) => com.shubham.rex.core.xml.JoinTransformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SQLTransformation")) => com.shubham.rex.core.xml.SQLTransformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DeDuplicationTransformation")) => com.shubham.rex.core.xml.DeDuplicationTransformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ExpressionTransformation")) => com.shubham.rex.core.xml.ExpressionTransformation

    }

    def writes(__obj: com.shubham.rex.core.xml.Category, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_ExpressionFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.Expression] {
    val targetNamespace: Option[String] = None

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.Expression] =
      phrase(opt(scalaxb.ElemName(None, "RowExpression")) ~
        opt(scalaxb.ElemName(None, "ColumnExpression")) ~
        opt(scalaxb.ElemName(None, "FilterExpression")) ^^ { case p1 ~ p2 ~ p3 =>
        com.shubham.rex.core.xml.Expression(p1.headOption map {
          scalaxb.fromXML[com.shubham.rex.core.xml.ExpressionRowType](_, scalaxb.ElemName(node) :: stack)
        },
          p2.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.ExpressionColumnType](_, scalaxb.ElemName(node) :: stack)
          },
          p3.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.ExpressionFilterType](_, scalaxb.ElemName(node) :: stack)
          })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.Expression, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RowExpression map {
        scalaxb.toXML[com.shubham.rex.core.xml.ExpressionRowType](_, None, Some("RowExpression"), __scope, false)
      } getOrElse {
        Nil
      },
        __obj.ColumnExpression map {
          scalaxb.toXML[com.shubham.rex.core.xml.ExpressionColumnType](_, None, Some("ColumnExpression"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.FilterExpression map {
          scalaxb.toXML[com.shubham.rex.core.xml.ExpressionFilterType](_, None, Some("FilterExpression"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultComshubhamrexcorexml_TransformationTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.TransformationType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("TransformationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.TransformationType] =
      phrase(opt(scalaxb.ElemName(None, "ColumnTransformations")) ~
        opt(scalaxb.ElemName(None, "GroupByTransformation")) ~
        opt(scalaxb.ElemName(None, "JoinTransformation")) ~
        opt(scalaxb.ElemName(None, "DeDuplication")) ~
        opt(scalaxb.ElemName(None, "Expression")) ^^ { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
        com.shubham.rex.core.xml.TransformationType(p1.headOption map {
          scalaxb.fromXML[com.shubham.rex.core.xml.ColumnTransformationType](_, scalaxb.ElemName(node) :: stack)
        },
          p2.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.GroupByType](_, scalaxb.ElemName(node) :: stack)
          },
          p3.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.JoinTransformType](_, scalaxb.ElemName(node) :: stack)
          },
          p4.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.DeDuplicationType](_, scalaxb.ElemName(node) :: stack)
          },
          p5.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.Expression](_, scalaxb.ElemName(node) :: stack)
          },
          scala.collection.immutable.ListMap(List(
            (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@name" -> _
            },
            (node \ "@category").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.Category](x, scalaxb.ElemName(node) :: stack)) } map {
              "@category" -> _
            },
            (node \ "@applyondataref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@applyondataref" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.TransformationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@category", _) => attr = scala.xml.Attribute(null, "category", __obj.category.toString, attr)
        case ("@applyondataref", _) => attr = scala.xml.Attribute(null, "applyondataref", __obj.applyondataref.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.TransformationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ColumnTransformations map {
        scalaxb.toXML[com.shubham.rex.core.xml.ColumnTransformationType](_, None, Some("ColumnTransformations"), __scope, false)
      } getOrElse {
        Nil
      },
        __obj.GroupByTransformation map {
          scalaxb.toXML[com.shubham.rex.core.xml.GroupByType](_, None, Some("GroupByTransformation"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.JoinTransformation map {
          scalaxb.toXML[com.shubham.rex.core.xml.JoinTransformType](_, None, Some("JoinTransformation"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.DeDuplication map {
          scalaxb.toXML[com.shubham.rex.core.xml.DeDuplicationType](_, None, Some("DeDuplication"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Expression map {
          scalaxb.toXML[com.shubham.rex.core.xml.Expression](_, None, Some("Expression"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultComshubhamrexcorexml_ModeTypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.ModeType] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.ModeType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.ModeType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Append")) => com.shubham.rex.core.xml.Append
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Overwrite")) => com.shubham.rex.core.xml.Overwrite
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ErrorIfExists")) => com.shubham.rex.core.xml.ErrorIfExists
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Ignore")) => com.shubham.rex.core.xml.Ignore

    }

    def writes(__obj: com.shubham.rex.core.xml.ModeType, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_DataSourcesTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.DataSourcesType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("DataSourcesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.DataSourcesType] =
      phrase(safeRep(scalaxb.ElemName(None, "DataSource")) ^^ { case p1 =>
        com.shubham.rex.core.xml.DataSourcesType(p1 map {
          scalaxb.fromXML[com.shubham.rex.core.xml.DataSourceType](_, scalaxb.ElemName(node) :: stack)
        })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.DataSourcesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.DataSource flatMap {
        scalaxb.toXML[com.shubham.rex.core.xml.DataSourceType](_, None, Some("DataSource"), __scope, false)
      })
  }

  trait DefaultComshubhamrexcorexml_DataSourceTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.DataSourceType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("DataSourceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.DataSourceType] =
      phrase((((scalaxb.ElemName(None, "Database")) ^^
        (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.shubham.rex.core.xml.DatabaseType](x, scalaxb.ElemName(node) :: stack)))) |
        ((scalaxb.ElemName(None, "File")) ^^
          (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.shubham.rex.core.xml.FileType](x, scalaxb.ElemName(node) :: stack))))) ^^ { case p1 =>
        com.shubham.rex.core.xml.DataSourceType(p1,
          scala.collection.immutable.ListMap(List(
            (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.SourceType](x, scalaxb.ElemName(node) :: stack)) } map {
              "@type" -> _
            },
            (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@name" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.DataSourceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.DataSourceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.datasourcetypeoption) map { x => scalaxb.toXML[scalaxb.DataRecord[com.shubham.rex.core.xml.DataSourceTypeOption]](x, x.namespace, x.key, __scope, false) }).get)
  }

  trait DefaultComshubhamrexcorexml_DatabaseTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.DatabaseType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("DatabaseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.DatabaseType] =
      phrase((scalaxb.ElemName(None, "Query")) ~
        (scalaxb.ElemName(None, "Connection")) ^^ { case p1 ~ p2 =>
        com.shubham.rex.core.xml.DatabaseType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
          scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.DatabaseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Query, None, Some("Query"), __scope, false),
        scalaxb.toXML[String](__obj.Connection, None, Some("Connection"), __scope, false))

  }

  trait DefaultComshubhamrexcorexml_FormatFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.Format] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.Format] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.Format = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("csv")) => com.shubham.rex.core.xml.CsvValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parquet")) => com.shubham.rex.core.xml.ParquetValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("orc")) => com.shubham.rex.core.xml.Orc
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("text")) => com.shubham.rex.core.xml.Text
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("json")) => com.shubham.rex.core.xml.JsonValue

    }

    def writes(__obj: com.shubham.rex.core.xml.Format, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_FileTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.FileType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("FileType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.FileType] =
      phrase((scalaxb.ElemName(None, "DirectoryPath")) ~
        opt(scalaxb.ElemName(None, "FileNameOrPattern")) ~
        opt(scalaxb.ElemName(None, "TopLinesToIgnore")) ~
        opt(scalaxb.ElemName(None, "BottomLinesToIgnore")) ~
        opt(scalaxb.ElemName(None, "Quote")) ~
        opt(scalaxb.ElemName(None, "Delimiter")) ~
        opt(scalaxb.ElemName(None, "Header")) ~
        opt(scalaxb.ElemName(None, "SchemaFilePath")) ~
        opt(scalaxb.ElemName(None, "Schema")) ~
        opt(scalaxb.ElemName(None, "Tags")) ~
        safeRep(scalaxb.ElemName(None, "WithColumn")) ^^ { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
        com.shubham.rex.core.xml.FileType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
          p2.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
          p3.headOption map {
            scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack)
          },
          p4.headOption map {
            scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack)
          },
          p5.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
          p6.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
          p7.headOption map {
            scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack)
          },
          p8.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
          p9.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.SchemaType](_, scalaxb.ElemName(node) :: stack)
          },
          p10.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
          p11 map {
            scalaxb.fromXML[com.shubham.rex.core.xml.WithColumnType](_, scalaxb.ElemName(node) :: stack)
          },
          scala.collection.immutable.ListMap(List(
            (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@name" -> _
            },
            (node \ "@format").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.Format](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.shubham.rex.core.xml.Format](scala.xml.Text("csv"), scalaxb.ElemName(node) :: stack))) map {
              "@format" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.FileType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@format", _) => if (__obj.format.toString != "csv") attr = scala.xml.Attribute(null, "format", __obj.format.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.FileType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.DirectoryPath, None, Some("DirectoryPath"), __scope, false),
        __obj.FileNameOrPattern map {
          scalaxb.toXML[String](_, None, Some("FileNameOrPattern"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.TopLinesToIgnore map {
          scalaxb.toXML[Int](_, None, Some("TopLinesToIgnore"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.BottomLinesToIgnore map {
          scalaxb.toXML[Int](_, None, Some("BottomLinesToIgnore"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Quote map {
          scalaxb.toXML[String](_, None, Some("Quote"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Delimiter map {
          scalaxb.toXML[String](_, None, Some("Delimiter"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Header map {
          scalaxb.toXML[Boolean](_, None, Some("Header"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.SchemaFilePath map {
          scalaxb.toXML[String](_, None, Some("SchemaFilePath"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Schema map {
          scalaxb.toXML[com.shubham.rex.core.xml.SchemaType](_, None, Some("Schema"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Tags map {
          scalaxb.toXML[String](_, None, Some("Tags"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.WithColumn flatMap {
          scalaxb.toXML[com.shubham.rex.core.xml.WithColumnType](_, None, Some("WithColumn"), __scope, false)
        })

  }

  trait DefaultComshubhamrexcorexml_WithColumnTypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.WithColumnType] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.WithColumnType] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.WithColumnType] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.WithColumnType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
          (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
            "@name" -> _
          }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.WithColumnType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.WithColumnType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultComshubhamrexcorexml_PropertiesTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.PropertiesType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("PropertiesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.PropertiesType] =
      phrase(safeRep(scalaxb.ElemName(None, "Property")) ~
        opt(scalaxb.ElemName(None, "PropertyFilePath")) ^^ { case p1 ~ p2 =>
        com.shubham.rex.core.xml.PropertiesType(p1 map {
          scalaxb.fromXML[com.shubham.rex.core.xml.PropertyType](_, scalaxb.ElemName(node) :: stack)
        },
          p2.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.PropertyFilePathType](_, scalaxb.ElemName(node) :: stack)
          })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.PropertiesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Property flatMap {
        scalaxb.toXML[com.shubham.rex.core.xml.PropertyType](_, None, Some("Property"), __scope, false)
      },
        __obj.PropertyFilePath map {
          scalaxb.toXML[com.shubham.rex.core.xml.PropertyFilePathType](_, None, Some("PropertyFilePath"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultComshubhamrexcorexml_PropertyFilePathTypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.PropertyFilePathType] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.PropertyFilePathType] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.PropertyFilePathType] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.PropertyFilePathType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
          (node \ "@propertyWithPrefix").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
            "@propertyWithPrefix" -> _
          }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.PropertyFilePathType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@propertyWithPrefix", _) => __obj.propertyWithPrefix foreach { x => attr = scala.xml.Attribute(null, "propertyWithPrefix", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.PropertyFilePathType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultComshubhamrexcorexml_PropertyTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.PropertyType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("PropertyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.PropertyType] =
      phrase((scalaxb.ElemName(None, "Key")) ~
        (scalaxb.ElemName(None, "Value")) ^^ { case p1 ~ p2 =>
        com.shubham.rex.core.xml.PropertyType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
          scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
          scala.collection.immutable.ListMap(List(
            (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@name" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.PropertyType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.PropertyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Key, None, Some("Key"), __scope, false),
        scalaxb.toXML[String](__obj.Value, None, Some("Value"), __scope, false))

  }

  trait DefaultComshubhamrexcorexml_IngestTypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.IngestType] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.IngestType] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.IngestType] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.IngestType(scala.collection.immutable.ListMap(List(
        (node \ "@applyondataref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@applyondataref" -> _
        },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@name" -> _
        }
      ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.IngestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@applyondataref", _) => attr = scala.xml.Attribute(null, "applyondataref", __obj.applyondataref.toString, attr)
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.IngestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }

  trait DefaultComshubhamrexcorexml_SourceTypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.SourceType] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.SourceType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.SourceType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("file")) => com.shubham.rex.core.xml.File
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("db")) => com.shubham.rex.core.xml.Db

    }

    def writes(__obj: com.shubham.rex.core.xml.SourceType, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_ReportingSqlFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.ReportingSql] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.ReportingSql] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.ReportingSql] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.ReportingSql(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
          (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
            "@name" -> _
          }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.ReportingSql, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.ReportingSql, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultComshubhamrexcorexml_ReportingTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.ReportingType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("ReportingType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.ReportingType] =
      phrase(safeRep(scalaxb.ElemName(None, "ReportingSql")) ~
        (scalaxb.ElemName(None, "PublishTo")) ~
        (scalaxb.ElemName(None, "PublishingPath")) ~
        opt(scalaxb.ElemName(None, "Mode")) ^^ { case p1 ~ p2 ~ p3 ~ p4 =>
        com.shubham.rex.core.xml.ReportingType(p1 map {
          scalaxb.fromXML[com.shubham.rex.core.xml.ReportingSql](_, scalaxb.ElemName(node) :: stack)
        },
          scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
          scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
          p4.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
          scala.collection.immutable.ListMap(List(
            (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@name" -> _
            },
            (node \ "@applyondataref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@applyondataref" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.ReportingType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@applyondataref", _) => attr = scala.xml.Attribute(null, "applyondataref", __obj.applyondataref.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.ReportingType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ReportingSql flatMap {
        scalaxb.toXML[com.shubham.rex.core.xml.ReportingSql](_, None, Some("ReportingSql"), __scope, false)
      },
        scalaxb.toXML[String](__obj.PublishTo, None, Some("PublishTo"), __scope, false),
        scalaxb.toXML[String](__obj.PublishingPath, None, Some("PublishingPath"), __scope, false),
        __obj.Mode map {
          scalaxb.toXML[String](_, None, Some("Mode"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultComshubhamrexcorexml_SideFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.Side] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.Side] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.Side = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("source")) => com.shubham.rex.core.xml.Source
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("target")) => com.shubham.rex.core.xml.Target

    }

    def writes(__obj: com.shubham.rex.core.xml.Side, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_StrategyFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.Strategy] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.Strategy] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.Strategy] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.Strategy(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
          (node \ "@columns").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
            "@columns" -> _
          }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.Strategy, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@columns", _) => __obj.columns foreach { x => attr = scala.xml.Attribute(null, "columns", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.Strategy, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultComshubhamrexcorexml_DeDuplicationTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.DeDuplicationType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("DeDuplicationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.DeDuplicationType] =
      phrase((scalaxb.ElemName(None, "DeDupColumns")) ~
        opt(scalaxb.ElemName(None, "Strategy")) ^^ { case p1 ~ p2 =>
        com.shubham.rex.core.xml.DeDuplicationType(scalaxb.fromXML[com.shubham.rex.core.xml.ColumnListType](p1, scalaxb.ElemName(node) :: stack),
          p2.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.Strategy](_, scalaxb.ElemName(node) :: stack)
          },
          scala.collection.immutable.ListMap(List(
            (node \ "@side").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.Side](x, scalaxb.ElemName(node) :: stack)) } map {
              "@side" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.DeDuplicationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@side", _) => __obj.side foreach { x => attr = scala.xml.Attribute(null, "side", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.DeDuplicationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.shubham.rex.core.xml.ColumnListType](__obj.DeDupColumns, None, Some("DeDupColumns"), __scope, false),
        __obj.Strategy map {
          scalaxb.toXML[com.shubham.rex.core.xml.Strategy](_, None, Some("Strategy"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultComshubhamrexcorexml_DateColumnFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.DateColumn] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.DateColumn] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.DateColumn] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.DateColumn(scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@name" -> _
        },
        (node \ "@sourceFormat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@sourceFormat" -> _
        },
        (node \ "@targetFormat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@targetFormat" -> _
        }
      ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.DateColumn, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@sourceFormat", _) => __obj.sourceFormat foreach { x => attr = scala.xml.Attribute(null, "sourceFormat", x.toString, attr) }
        case ("@targetFormat", _) => __obj.targetFormat foreach { x => attr = scala.xml.Attribute(null, "targetFormat", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.DateColumn, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }

  trait DefaultComshubhamrexcorexml_DateColumnsTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.DateColumnsType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("DateColumnsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.DateColumnsType] =
      phrase(safeRep(scalaxb.ElemName(None, "DateColumn")) ^^ { case p1 =>
        com.shubham.rex.core.xml.DateColumnsType(p1 map {
          scalaxb.fromXML[com.shubham.rex.core.xml.DateColumn](_, scalaxb.ElemName(node) :: stack)
        })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.DateColumnsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.DateColumn flatMap {
        scalaxb.toXML[com.shubham.rex.core.xml.DateColumn](_, None, Some("DateColumn"), __scope, false)
      })
  }

  trait DefaultComshubhamrexcorexml_ModeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.Mode] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.Mode] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.Mode = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("required")) => com.shubham.rex.core.xml.Required
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ignore")) => com.shubham.rex.core.xml.IgnoreValue

    }

    def writes(__obj: com.shubham.rex.core.xml.Mode, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_SelectColumnsWithModeTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.SelectColumnsWithModeType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("SelectColumnsWithModeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.SelectColumnsWithModeType] =
      phrase(safeRep(scalaxb.ElemName(None, "Column")) ^^ { case p1 =>
        com.shubham.rex.core.xml.SelectColumnsWithModeType(p1 map {
          scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
        },
          scala.collection.immutable.ListMap(List(
            (node \ "@mode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.Mode](x, scalaxb.ElemName(node) :: stack)) } map {
              "@mode" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.SelectColumnsWithModeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@mode", _) => __obj.mode foreach { x => attr = scala.xml.Attribute(null, "mode", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.SelectColumnsWithModeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Column flatMap {
        scalaxb.toXML[String](_, None, Some("Column"), __scope, false)
      })
  }

  trait DefaultComshubhamrexcorexml_ReconcilerTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.ReconcilerType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("ReconcilerType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.ReconcilerType] =
      phrase((scalaxb.ElemName(None, "ClassName")) ^^ { case p1 =>
        com.shubham.rex.core.xml.ReconcilerType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.ReconcilerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.ClassName, None, Some("ClassName"), __scope, false))
  }

  trait DefaultComshubhamrexcorexml_ReconciliationTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.ReconciliationType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("ReconciliationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.ReconciliationType] =
      phrase((scalaxb.ElemName(None, "Source")) ~
        (scalaxb.ElemName(None, "Target")) ~
        (scalaxb.ElemName(None, "ComparisonKey")) ~
        opt(scalaxb.ElemName(None, "DateColumns")) ~
        opt(scalaxb.ElemName(None, "NumericColumns")) ~
        opt(scalaxb.ElemName(None, "ReconcileColumns")) ~
        opt(scalaxb.ElemName(None, "Reconciler")) ~
        opt(scalaxb.ElemName(None, "CaseColumns")) ~
        opt(scalaxb.ElemName(None, "AdditionalRequiredFields")) ~
        safeRep(scalaxb.ElemName(None, "DeDuplicationStrategy")) ^^ { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
        com.shubham.rex.core.xml.ReconciliationType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
          scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
          scalaxb.fromXML[com.shubham.rex.core.xml.ColumnListType](p3, scalaxb.ElemName(node) :: stack),
          p4.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.DateColumnsType](_, scalaxb.ElemName(node) :: stack)
          },
          p5.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.ColumnListType](_, scalaxb.ElemName(node) :: stack)
          },
          p6.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.SelectColumnsWithModeType](_, scalaxb.ElemName(node) :: stack)
          },
          p7.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.ReconcilerType](_, scalaxb.ElemName(node) :: stack)
          },
          p8.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.SelectColumnsWithModeType](_, scalaxb.ElemName(node) :: stack)
          },
          p9.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.AdditionalFieldsType](_, scalaxb.ElemName(node) :: stack)
          },
          p10 map {
            scalaxb.fromXML[com.shubham.rex.core.xml.DeDuplicationType](_, scalaxb.ElemName(node) :: stack)
          },
          scala.collection.immutable.ListMap(List(
            (node \ "@applyondataref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@applyondataref" -> _
            },
            (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@name" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.ReconciliationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@applyondataref", _) => attr = scala.xml.Attribute(null, "applyondataref", __obj.applyondataref.toString, attr)
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.ReconciliationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Source, None, Some("Source"), __scope, false),
        scalaxb.toXML[String](__obj.Target, None, Some("Target"), __scope, false),
        scalaxb.toXML[com.shubham.rex.core.xml.ColumnListType](__obj.ComparisonKey, None, Some("ComparisonKey"), __scope, false),
        __obj.DateColumns map {
          scalaxb.toXML[com.shubham.rex.core.xml.DateColumnsType](_, None, Some("DateColumns"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.NumericColumns map {
          scalaxb.toXML[com.shubham.rex.core.xml.ColumnListType](_, None, Some("NumericColumns"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.ReconcileColumns map {
          scalaxb.toXML[com.shubham.rex.core.xml.SelectColumnsWithModeType](_, None, Some("ReconcileColumns"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.Reconciler map {
          scalaxb.toXML[com.shubham.rex.core.xml.ReconcilerType](_, None, Some("Reconciler"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.CaseColumns map {
          scalaxb.toXML[com.shubham.rex.core.xml.SelectColumnsWithModeType](_, None, Some("CaseColumns"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.AdditionalRequiredFields map {
          scalaxb.toXML[com.shubham.rex.core.xml.AdditionalFieldsType](_, None, Some("AdditionalRequiredFields"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.DeDuplicationStrategy flatMap {
          scalaxb.toXML[com.shubham.rex.core.xml.DeDuplicationType](_, None, Some("DeDuplicationStrategy"), __scope, false)
        })

  }

  trait DefaultComshubhamrexcorexml_ExportTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.ExportType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("ExportType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.ExportType] =
      phrase(opt(((scalaxb.ElemName(None, "Hive")) ^^
        (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.shubham.rex.core.xml.HiveTableType](x, scalaxb.ElemName(node) :: stack)))) |
        ((scalaxb.ElemName(None, "File")) ^^
          (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.shubham.rex.core.xml.ExportFileType](x, scalaxb.ElemName(node) :: stack))))) ^^ { case p1 =>
        com.shubham.rex.core.xml.ExportType(p1,
          scala.collection.immutable.ListMap(List(
            (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@name" -> _
            },
            (node \ "@applyondataref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
              "@applyondataref" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.ExportType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@applyondataref", _) => attr = scala.xml.Attribute(null, "applyondataref", __obj.applyondataref.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.ExportType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.exporttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[com.shubham.rex.core.xml.ExportTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {
        Nil
      })
  }

  trait DefaultComshubhamrexcorexml_AdditionalFieldsTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.AdditionalFieldsType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("additionalFieldsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.AdditionalFieldsType] =
      phrase((scalaxb.ElemName(None, "source")) ~
        (scalaxb.ElemName(None, "target")) ^^ { case p1 ~ p2 =>
        com.shubham.rex.core.xml.AdditionalFieldsType(scalaxb.fromXML[com.shubham.rex.core.xml.ColumnListType](p1, scalaxb.ElemName(node) :: stack),
          scalaxb.fromXML[com.shubham.rex.core.xml.ColumnListType](p2, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.AdditionalFieldsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.shubham.rex.core.xml.ColumnListType](__obj.source, None, Some("source"), __scope, false),
        scalaxb.toXML[com.shubham.rex.core.xml.ColumnListType](__obj.target, None, Some("target"), __scope, false))

  }

  trait DefaultComshubhamrexcorexml_ColumnFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.Column] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.Column] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.Column] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.Column(scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@name" -> _
        },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@type" -> _
        },
        (node \ "@isNullable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map {
          "@isNullable" -> _
        },
        (node \ "@isNew").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map {
          "@isNew" -> _
        },
        (node \ "@expr").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@expr" -> _
        }
      ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.Column, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@type", _) => __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
        case ("@isNullable", _) => __obj.isNullable foreach { x => attr = scala.xml.Attribute(null, "isNullable", x.toString, attr) }
        case ("@isNew", _) => __obj.isNew foreach { x => attr = scala.xml.Attribute(null, "isNew", x.toString, attr) }
        case ("@expr", _) => attr = scala.xml.Attribute(null, "expr", __obj.expr.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.Column, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }

  trait DefaultComshubhamrexcorexml_ExpressionColumnTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.ExpressionColumnType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("ExpressionColumnType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.ExpressionColumnType] =
      phrase(safeRep(scalaxb.ElemName(None, "Column")) ^^ { case p1 =>
        com.shubham.rex.core.xml.ExpressionColumnType(p1 map {
          scalaxb.fromXML[com.shubham.rex.core.xml.Column](_, scalaxb.ElemName(node) :: stack)
        })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.ExpressionColumnType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Column flatMap {
        scalaxb.toXML[com.shubham.rex.core.xml.Column](_, None, Some("Column"), __scope, false)
      })
  }

  trait DefaultComshubhamrexcorexml_Column2Format extends scalaxb.XMLFormat[com.shubham.rex.core.xml.Column2] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.Column2] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.Column2] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.Column2(scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@name" -> _
        },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@type" -> _
        },
        (node \ "@isNullable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map {
          "@isNullable" -> _
        },
        (node \ "@isNew").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map {
          "@isNew" -> _
        }
      ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.Column2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@type", _) => __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
        case ("@isNullable", _) => __obj.isNullable foreach { x => attr = scala.xml.Attribute(null, "isNullable", x.toString, attr) }
        case ("@isNew", _) => __obj.isNew foreach { x => attr = scala.xml.Attribute(null, "isNew", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.Column2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }

  trait DefaultComshubhamrexcorexml_ExpressionRowTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.ExpressionRowType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("ExpressionRowType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.ExpressionRowType] =
      phrase(safeRep(scalaxb.ElemName(None, "Column")) ~
        (scalaxb.ElemName(None, "Expr")) ^^ { case p1 ~ p2 =>
        com.shubham.rex.core.xml.ExpressionRowType(p1 map {
          scalaxb.fromXML[com.shubham.rex.core.xml.Column2](_, scalaxb.ElemName(node) :: stack)
        },
          scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.ExpressionRowType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Column flatMap {
        scalaxb.toXML[com.shubham.rex.core.xml.Column2](_, None, Some("Column"), __scope, false)
      },
        scalaxb.toXML[String](__obj.Expr, None, Some("Expr"), __scope, false))

  }

  trait DefaultComshubhamrexcorexml_ExpressionFilterTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.ExpressionFilterType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("ExpressionFilterType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.ExpressionFilterType] =
      phrase((scalaxb.ElemName(None, "Expr")) ^^ { case p1 =>
        com.shubham.rex.core.xml.ExpressionFilterType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.ExpressionFilterType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.Expr, None, Some("Expr"), __scope, false))
  }

  trait DefaultComshubhamrexcorexml_SchemaColumnTypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.SchemaColumnType] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.SchemaColumnType] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.SchemaColumnType] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.SchemaColumnType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
          (node \ "@dataType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.ColumnDataType](x, scalaxb.ElemName(node) :: stack)) } map {
            "@dataType" -> _
          },
          (node \ "@isNullable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map {
            "@isNullable" -> _
          }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.SchemaColumnType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@dataType", _) => __obj.dataType foreach { x => attr = scala.xml.Attribute(null, "dataType", x.toString, attr) }
        case ("@isNullable", _) => __obj.isNullable foreach { x => attr = scala.xml.Attribute(null, "isNullable", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.SchemaColumnType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultComshubhamrexcorexml_EnforceModeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.EnforceMode] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.EnforceMode] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.EnforceMode = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("failFast")) => com.shubham.rex.core.xml.FailFast
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dropMalformed")) => com.shubham.rex.core.xml.DropMalformed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("permissive")) => com.shubham.rex.core.xml.Permissive

    }

    def writes(__obj: com.shubham.rex.core.xml.EnforceMode, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_SchemaTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.SchemaType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("SchemaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.SchemaType] =
      phrase(safeRep(scalaxb.ElemName(None, "SchemaColumn")) ^^ { case p1 =>
        com.shubham.rex.core.xml.SchemaType(p1 map {
          scalaxb.fromXML[com.shubham.rex.core.xml.SchemaColumnType](_, scalaxb.ElemName(node) :: stack)
        },
          scala.collection.immutable.ListMap(List(
            (node \ "@enforceMode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.EnforceMode](x, scalaxb.ElemName(node) :: stack)) } map {
              "@enforceMode" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.SchemaType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@enforceMode", _) => __obj.enforceMode foreach { x => attr = scala.xml.Attribute(null, "enforceMode", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.SchemaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.SchemaColumn flatMap {
        scalaxb.toXML[com.shubham.rex.core.xml.SchemaColumnType](_, None, Some("SchemaColumn"), __scope, false)
      })
  }

  trait DefaultComshubhamrexcorexml_JoinTypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.JoinType] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.JoinType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.JoinType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inner")) => com.shubham.rex.core.xml.Inner
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("full")) => com.shubham.rex.core.xml.Full
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("left")) => com.shubham.rex.core.xml.LeftType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("right")) => com.shubham.rex.core.xml.RightType

    }

    def writes(__obj: com.shubham.rex.core.xml.JoinType, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_JoinKeyFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.JoinKey] with scalaxb.CanWriteChildNodes[com.shubham.rex.core.xml.JoinKey] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.JoinKey] = seq match {
      case node: scala.xml.Node => Right(com.shubham.rex.core.xml.JoinKey(scala.collection.immutable.ListMap(List(
        (node \ "@leftSideKey").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@leftSideKey" -> _
        },
        (node \ "@rightSideKey").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map {
          "@rightSideKey" -> _
        }
      ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: com.shubham.rex.core.xml.JoinKey, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@leftSideKey", _) => attr = scala.xml.Attribute(null, "leftSideKey", __obj.leftSideKey.toString, attr)
        case ("@rightSideKey", _) => attr = scala.xml.Attribute(null, "rightSideKey", __obj.rightSideKey.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.JoinKey, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }

  trait DefaultComshubhamrexcorexml_JoinTransformTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.JoinTransformType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("JoinTransformType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.JoinTransformType] =
      phrase((scalaxb.ElemName(None, "RightSideJoiningData")) ~
        (scalaxb.ElemName(None, "JoinKey")) ~
        opt(scalaxb.ElemName(None, "Select")) ^^ { case p1 ~ p2 ~ p3 =>
        com.shubham.rex.core.xml.JoinTransformType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
          scalaxb.fromXML[com.shubham.rex.core.xml.JoinKey](p2, scalaxb.ElemName(node) :: stack),
          p3.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.ColumnListType](_, scalaxb.ElemName(node) :: stack)
          },
          scala.collection.immutable.ListMap(List(
            (node \ "@joinType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.shubham.rex.core.xml.JoinType](x, scalaxb.ElemName(node) :: stack)) } map {
              "@joinType" -> _
            }
          ).flatten[(String, scalaxb.DataRecord[Any])]: _*))
      })

    override def writesAttribute(__obj: com.shubham.rex.core.xml.JoinTransformType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData = scala.xml.Null
      __obj.attributes.toList map {
        case ("@joinType", _) => attr = scala.xml.Attribute(null, "joinType", __obj.joinType.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map {
          __scope.getPrefix(_)
        }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.shubham.rex.core.xml.JoinTransformType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.RightSideJoiningData, None, Some("RightSideJoiningData"), __scope, false),
        scalaxb.toXML[com.shubham.rex.core.xml.JoinKey](__obj.JoinKey, None, Some("JoinKey"), __scope, false),
        __obj.Select map {
          scalaxb.toXML[com.shubham.rex.core.xml.ColumnListType](_, None, Some("Select"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultComshubhamrexcorexml_ColumnDataTypeFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.ColumnDataType] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.ColumnDataType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.ColumnDataType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("integerType")) => com.shubham.rex.core.xml.IntegerType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stringType")) => com.shubham.rex.core.xml.StringType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("doubleType")) => com.shubham.rex.core.xml.DoubleType

    }

    def writes(__obj: com.shubham.rex.core.xml.ColumnDataType, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_ExportFormatFormat extends scalaxb.XMLFormat[com.shubham.rex.core.xml.ExportFormat] {
    val targetNamespace: Option[String] = None

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.shubham.rex.core.xml.ExportFormat] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }

    def fromString(value: String, scope: scala.xml.NamespaceBinding): com.shubham.rex.core.xml.ExportFormat = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("csv")) => com.shubham.rex.core.xml.Csv
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parquet")) => com.shubham.rex.core.xml.Parquet
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("avro")) => com.shubham.rex.core.xml.Avro
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("json")) => com.shubham.rex.core.xml.Json

    }

    def writes(__obj: com.shubham.rex.core.xml.ExportFormat, __namespace: Option[String], __elementLabel: Option[String],
               __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull,
        __elementLabel getOrElse {
          sys.error("missing element label.")
        },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultComshubhamrexcorexml_PartitionTypeFormat extends scalaxb.ElemNameParser[com.shubham.rex.core.xml.PartitionType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("PartitionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.shubham.rex.core.xml.PartitionType] =
      phrase(opt(scalaxb.ElemName(None, "DatePartitionFormat")) ~
        opt(scalaxb.ElemName(None, "ColumnPartition")) ^^ { case p1 ~ p2 =>
        com.shubham.rex.core.xml.PartitionType(p1.headOption map {
          scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
        },
          p2.headOption map {
            scalaxb.fromXML[com.shubham.rex.core.xml.ColumnListType](_, scalaxb.ElemName(node) :: stack)
          })
      })

    def writesChildNodes(__obj: com.shubham.rex.core.xml.PartitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DatePartitionFormat map {
        scalaxb.toXML[String](_, None, Some("DatePartitionFormat"), __scope, false)
      } getOrElse {
        Nil
      },
        __obj.ColumnPartition map {
          scalaxb.toXML[com.shubham.rex.core.xml.ColumnListType](_, None, Some("ColumnPartition"), __scope, false)
        } getOrElse {
          Nil
        })

  }


}

